// <auto-generated />
using System;
using MS.Services.TaskCatalog.Infrastructure.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MS.Services.TaskCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(TaskCatalogDbContext))]
    [Migration("20220723125626_Nochange")]
    partial class Nochange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Comments.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("body");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_comments_comment_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_comments_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_comments_task_id");

                    b.ToTable("Comments", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Projects.Project", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attachment");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_id");

                    b.ToTable("Projects", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_id");

                    b.ToTable("Categories", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Task", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("AlartReminder")
                        .HasColumnType("integer")
                        .HasColumnName("alart_reminder");

                    b.Property<long?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("ControllerEndTime")
                        .HasColumnType("text")
                        .HasColumnName("controller_end_time");

                    b.Property<long?>("ControllerUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("controller_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrentVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("current_version");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("DragLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("drag_locked");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date_time");

                    b.Property<short>("ImportanceType")
                        .HasColumnType("smallint")
                        .HasColumnName("importance_type");

                    b.Property<bool>("IsTodayTask")
                        .HasColumnType("boolean")
                        .HasColumnName("is_today_task");

                    b.Property<int>("ManagerOrder")
                        .HasColumnType("integer")
                        .HasColumnName("manager_order");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("OriginalVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("ReturnCount")
                        .HasColumnType("integer")
                        .HasColumnName("return_count");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date_time");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("TesterUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("tester_user_id");

                    b.Property<long?>("VoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("voice_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_tasks_category_id");

                    b.HasIndex("ControllerUserId")
                        .HasDatabaseName("ix_tasks_controller_user_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_tasks_id");

                    b.HasIndex("TesterUserId")
                        .HasDatabaseName("ix_tasks_tester_user_id");

                    b.ToTable("Tasks", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskDeadLine", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_task_dead_lines");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_task_dead_lines_id");

                    b.ToTable("TaskDeadLines", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_task_images");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_task_images_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_task_images_task_id");

                    b.ToTable("TaskImages", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_task_notifications");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_task_notifications_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_task_notifications_task_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_task_notifications_user_id");

                    b.ToTable("TaskNotifications", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<short>("UserRole")
                        .HasColumnType("smallint")
                        .HasColumnName("user_role");

                    b.HasKey("Id")
                        .HasName("pk_task_progresses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_task_progresses_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_task_progresses_task_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_task_progresses_user_id");

                    b.ToTable("TaskProgresses", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskRequirements", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean")
                        .HasColumnName("is_done");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_task_requirements");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_task_requirements_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_task_requirements_task_id");

                    b.ToTable("TaskRequirements", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_units_id");

                    b.ToTable("Units", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("Users", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Users.UserSelection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long?>("SelectUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("select_user_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_selections");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_selections_id");

                    b.HasIndex("SelectUserId")
                        .HasDatabaseName("ix_user_selections_select_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_selections_user_id");

                    b.ToTable("UserSelections", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("WorkflowRoleModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_role_model_id");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_id");

                    b.HasIndex("WorkflowRoleModelId")
                        .HasDatabaseName("ix_roles_workflow_role_model_id");

                    b.ToTable("Roles", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrentVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("current_version");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_workflows");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflows_id");

                    b.ToTable("Workflows", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkFlowAlerts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.HasKey("Id")
                        .HasName("pk_work_flow_alerts");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_work_flow_alerts_id");

                    b.ToTable("WorkFlowAlerts", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_instances");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_instances_id");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("ix_workflow_instances_workflow_id");

                    b.ToTable("WorkflowInstances", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_role_models");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_role_models_id");

                    b.ToTable("WorkflowRoleModels", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("NotificationCount")
                        .HasColumnType("integer")
                        .HasColumnName("notification_count");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("visit_time");

                    b.Property<bool>("Visited")
                        .HasColumnType("boolean")
                        .HasColumnName("visited");

                    b.Property<long>("WorkflowStepInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_step_instance_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_role_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_role_users_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_workflow_role_users_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workflow_role_users_user_id");

                    b.HasIndex("WorkflowStepInstanceId")
                        .HasDatabaseName("ix_workflow_role_users_workflow_step_instance_id");

                    b.ToTable("WorkflowRoleUsers", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<TimeSpan>("DeadLine")
                        .HasColumnType("interval")
                        .HasColumnName("dead_line");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("WorkFlowId")
                        .HasColumnType("bigint")
                        .HasColumnName("work_flow_id");

                    b.Property<long>("WorkflowRoleModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_role_model_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_steps");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_steps_id");

                    b.HasIndex("WorkFlowId")
                        .HasDatabaseName("ix_workflow_steps_work_flow_id");

                    b.HasIndex("WorkflowRoleModelId")
                        .HasDatabaseName("ix_workflow_steps_workflow_role_model_id");

                    b.ToTable("WorkflowSteps", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowStepAlertInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("Delay")
                        .HasColumnType("integer")
                        .HasColumnName("delay");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("WorkflowAlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_alert_id");

                    b.Property<long>("WorkflowRoleUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_role_user_id");

                    b.Property<long>("WorkflowStepInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_step_instance_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_alert_instance");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_step_alert_instance_id");

                    b.HasIndex("WorkflowAlertId")
                        .HasDatabaseName("ix_workflow_step_alert_instance_workflow_alert_id");

                    b.HasIndex("WorkflowRoleUserId")
                        .HasDatabaseName("ix_workflow_step_alert_instance_workflow_role_user_id");

                    b.HasIndex("WorkflowStepInstanceId")
                        .HasDatabaseName("ix_workflow_step_alert_instance_workflow_step_instance_id");

                    b.ToTable("WorkflowStepAlertInstance", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowStepAlerts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("Delay")
                        .HasColumnType("integer")
                        .HasColumnName("delay");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("WorkflowAlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_alert_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_alerts");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_step_alerts_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_workflow_step_alerts_role_id");

                    b.HasIndex("WorkflowAlertId")
                        .HasDatabaseName("ix_workflow_step_alerts_workflow_alert_id");

                    b.ToTable("WorkflowStepAlerts", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStepInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<TimeSpan>("DeadLine")
                        .HasColumnType("interval")
                        .HasColumnName("dead_line");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_visit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("WorkflowInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_instance_id");

                    b.Property<long?>("WorkflowRoleModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_role_model_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_instance");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_step_instance_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_workflow_step_instance_owner_id");

                    b.HasIndex("WorkflowInstanceId")
                        .HasDatabaseName("ix_workflow_step_instance_workflow_instance_id");

                    b.HasIndex("WorkflowRoleModelId")
                        .HasDatabaseName("ix_workflow_step_instance_workflow_role_model_id");

                    b.ToTable("WorkflowStepInstance", "taskCatalog");
                });

            modelBuilder.Entity("ProjectTask", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("projects_id");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint")
                        .HasColumnName("tasks_id");

                    b.HasKey("ProjectsId", "TasksId")
                        .HasName("pk_task_projects");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_task_projects_tasks_id");

                    b.ToTable("TaskProjects", "taskCatalog");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("projects_id");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint")
                        .HasColumnName("users_id");

                    b.HasKey("ProjectsId", "UsersId")
                        .HasName("pk_user_projects");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_user_projects_users_id");

                    b.ToTable("UserProjects", "taskCatalog");
                });

            modelBuilder.Entity("TaskUnit", b =>
                {
                    b.Property<long>("TasksId")
                        .HasColumnType("bigint")
                        .HasColumnName("tasks_id");

                    b.Property<long>("UnitsId")
                        .HasColumnType("bigint")
                        .HasColumnName("units_id");

                    b.HasKey("TasksId", "UnitsId")
                        .HasName("pk_task_units");

                    b.HasIndex("UnitsId")
                        .HasDatabaseName("ix_task_units_units_id");

                    b.ToTable("TaskUnits", "taskCatalog");
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.Property<long>("TasksId")
                        .HasColumnType("bigint")
                        .HasColumnName("tasks_id");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint")
                        .HasColumnName("users_id");

                    b.HasKey("TasksId", "UsersId")
                        .HasName("pk_user_tasks");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_user_tasks_users_id");

                    b.ToTable("UserTasks", "taskCatalog");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Comments.Comment", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Comments.Comment", "CommentModel")
                        .WithMany("Comments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_comments_comments_comment_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_tasks_task_temp_id");

                    b.Navigation("CommentModel");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Task", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_categories_category_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "ControllerUser")
                        .WithMany("ControllerTasks")
                        .HasForeignKey("ControllerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_users_controller_user_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "TesterUser")
                        .WithMany("TesterTasks")
                        .HasForeignKey("TesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_users_tester_user_id");

                    b.Navigation("Category");

                    b.Navigation("ControllerUser");

                    b.Navigation("TesterUser");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskDeadLine", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithOne("TaskDeadLine")
                        .HasForeignKey("MS.Services.TaskCatalog.Domain.Tasks.TaskDeadLine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_dead_lines_tasks_id");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskImage", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithMany("Images")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_images_tasks_task_id1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskNotification", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithMany("TaskNotifications")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_notifications_tasks_task_id1");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_task_notifications_users_user_id");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskProgress", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_progresses_tasks_task_id1");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "User")
                        .WithMany("TaskProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_progresses_users_user_id");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.TaskRequirements", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", "Task")
                        .WithMany("Requirements")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_requirements_tasks_task_id1");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Users.UserSelection", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "SelectUser")
                        .WithMany("UserSelections")
                        .HasForeignKey("SelectUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_selections_users_select_user_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "User")
                        .WithMany("SelectionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_selections_users_user_id");

                    b.Navigation("SelectUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.Role", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleModel", "WorkflowRoleModel")
                        .WithMany("Roles")
                        .HasForeignKey("WorkflowRoleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_work_flow_role_models_workflow_role_model_id");

                    b.Navigation("WorkflowRoleModel");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowInstance", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Workflows.Workflow", "Workflow")
                        .WithMany("WorkflowInstances")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_instances_workflows_workflow_id1");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleUser", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.Role", "Role")
                        .WithMany("WorkflowRoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_role_users_roles_role_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "User")
                        .WithMany("WorkflowRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_role_users_users_user_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStepInstance", "WorkflowStepInstance")
                        .WithMany("WorkflowRoleUsers")
                        .HasForeignKey("WorkflowStepInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_role_users_workflow_step_instance_workflow_step_instan");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("WorkflowStepInstance");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStep", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Workflows.Workflow", "Workflow")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_steps_workflows_work_flow_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleModel", "WorkflowRoleModel")
                        .WithMany()
                        .HasForeignKey("WorkflowRoleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_steps_workflow_role_models_workflow_role_model_id");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowRoleModel");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowStepAlertInstance", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkFlowAlerts", "WorkFlowAlert")
                        .WithMany()
                        .HasForeignKey("WorkflowAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_alert_instance_work_flow_alerts_workflow_alert_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleUser", "WorkflowRoleUser")
                        .WithMany("WorkflowStepAlertInstances")
                        .HasForeignKey("WorkflowRoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_alert_instance_workflow_role_user_workflow_role_");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStepInstance", "WorkflowStepInstance")
                        .WithMany("WorkflowStepAlertInstances")
                        .HasForeignKey("WorkflowStepInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_alert_instance_workflow_step_instances_workflow_");

                    b.Navigation("WorkFlowAlert");

                    b.Navigation("WorkflowRoleUser");

                    b.Navigation("WorkflowStepInstance");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowStepAlerts", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_alerts_roles_role_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkFlowAlerts", "WorkFlowAlert")
                        .WithMany("WorkflowStepAlerts")
                        .HasForeignKey("WorkflowAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_alerts_work_flow_alerts_workflow_alert_id");

                    b.Navigation("Role");

                    b.Navigation("WorkFlowAlert");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStepInstance", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_workflow_step_instance_users_owner_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Workflows.WorkflowInstance", "WorkflowInstance")
                        .WithMany("workflowSteps")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_instance_workflow_instances_workflow_instance_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleModel", "WorkflowRoleModel")
                        .WithMany("WorkflowStepInstances")
                        .HasForeignKey("WorkflowRoleModelId")
                        .HasConstraintName("fk_workflow_step_instance_workflow_role_models_workflow_role_model");

                    b.Navigation("Owner");

                    b.Navigation("WorkflowInstance");

                    b.Navigation("WorkflowRoleModel");
                });

            modelBuilder.Entity("ProjectTask", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_projects_projects_projects_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_projects_tasks_tasks_id");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_projects_projects_projects_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_projects_users_users_id");
                });

            modelBuilder.Entity("TaskUnit", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_units_tasks_tasks_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_units_units_units_id");
                });

            modelBuilder.Entity("TaskUser", b =>
                {
                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tasks_tasks_tasks_id");

                    b.HasOne("MS.Services.TaskCatalog.Domain.Tasks.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tasks_users_users_id");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Comments.Comment", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Requirements");

                    b.Navigation("TaskDeadLine")
                        .IsRequired();

                    b.Navigation("TaskNotifications");

                    b.Navigation("TaskProgresses");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Tasks.User", b =>
                {
                    b.Navigation("ControllerTasks");

                    b.Navigation("SelectionUsers");

                    b.Navigation("TaskProgresses");

                    b.Navigation("TesterTasks");

                    b.Navigation("UserSelections");

                    b.Navigation("WorkflowRoleUsers");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.Role", b =>
                {
                    b.Navigation("WorkflowRoleUsers");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.Workflow", b =>
                {
                    b.Navigation("WorkflowInstances");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkFlowAlerts", b =>
                {
                    b.Navigation("WorkflowStepAlerts");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowInstance", b =>
                {
                    b.Navigation("workflowSteps");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleModel", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("WorkflowStepInstances");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.workflows.WorkflowRoleUser", b =>
                {
                    b.Navigation("WorkflowStepAlertInstances");
                });

            modelBuilder.Entity("MS.Services.TaskCatalog.Domain.Workflows.WorkflowStepInstance", b =>
                {
                    b.Navigation("WorkflowRoleUsers");

                    b.Navigation("WorkflowStepAlertInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
